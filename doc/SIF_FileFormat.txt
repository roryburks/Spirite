Version 000E

** UTF8  means null-terminated UTF8 encoded string ***

Header
 [4, UTF8 str] "SIFF"
 [4, int] Version number
 [2, short] Image Width
 [2, short] Image Height

 Per Group:
 [4, UTF8 str] 4-character chunk identifier
 [4, int] n: size of chunk
 [n, RAW] chunk data

 ---- GRPT - Group Tree Chunk ----
 Per Group:
 [1, byte]: Depth of the GroupTree
 [4, float] : alpha
 [2, short] : X offset
 [2, short] : Y offset
 [1, byte] : various single-bit settings
    1st bit: Visibility
    2nd bit: Expanded
 [n, UTF8 str] : Node name
 [1, byte] : Node Type ID:
    0x00 : Group Node
    0x01 : Simple Layer
        [4, int] : ID of linked MediumData
    0x02 : Sprite Layer
        [1, byte] : Number of Parts
        Per Part:
            [n, UTF8 str] : Part Type name
            [4, float] : translationX
            [4, float] : translationY
            [4, float] : scaleX
            [4, float] : scaleY
            [4, float] : rotation
            [4, int] : draw depth
            [4, int] : MediumId
	0x03 : Reference Layer
		[4, int] : Node ID of node referred to
	0x04 : Puppet Layer
		[1] : Whether or not is derived
		SWITCH:
		CASE 0 (Base):
			[2, ushort] : Number of Parts
			Per Part:
				[2, ushort] parent (0 for root, 1 for 1st part in the list, etc)
				[4, int] : MediumId
				[4 4 4 4 (16), float] : bone x1, y1, x2, y2 in that order
				[4, int] : draw depth

 ---- IMGD - Medium Data Chunk ----
 Per Medium:
 [4, int] : MediumId
 [1, byte] : Type
     SWITCH:
     CASE 0 (Plain) :
        [4, int] : Size of Image Data
        [n, RAW] : PNG-saved Image File
     CASE 1 (Dynamic) :
        [2, short] : Dynamic offsetX
        [2, short] : Dynamic offsetY
        [4, int] : Size of Image Data
        [n, RAW] : PNG-saved Image File
    CASE 2 (Prismatic) :
        [2, ushort] : number of color _layers
        Per Color Layer:
			[4, int] : color
			[2, short] : Dynamic offsetX
			[2, short] : Dynamic offsetY
			[4, int] : Size of Image Data
			[n, RAW] : PNG-saved Image File
	CASE 3 (Maglev) :
		// NOTE: Maglev structure is likely to change tremendously in the future
		[2, ushort] : number of things
		Per Thing:
			[1, byte] : thing type
			SWITCH:
			Case 0 (Stroke):
				[4, int] : color
				[1, byte] : Stroke Method
				[4, float] : width of stroke
				[2, ushort] : number of vertices
				Per vertex:
					[4, float] : x
					[4, float] : y
					[4, float] : pressure
			Case 1 (Fill) :
				[4, int] : color
				[1, byte] : Fill Method
				[2, ushort] : number of stroke segments
				Per reference:
					[2, ushort] : reference to stroke
					[4, float] : start point of stroke
					[4, float] : end point of stroke
		Per Stroke :

---- ANIM - Animation Data Chunk
Per Animation:
[n, UTF8 str] : Animation Name
[1, byte] : Animation Type ID:
    0x01 : FixedFrameAnimation
        [2, ushort] : Number of Layers
        Per Layer:
            [4, int] : NodeID of GroupNode Bound to (see Bellow), can be -1 for unbounded
            [1, byte] : 0 bit: whether or not subgroups are linked
            [2, ushort] : Number of Frames that have information
            Per Frame:
                [1, byte] : FrameType
                [4, int] : NodeID  (can be -1, should match FrameType)
                [2, ushort] : Length
    0x02 : RigAnimation
        [2, ushort] : Number of Sprites
        Per Sprite:
        	[4, int] : NodeID of LayerNode of Sprite
            [2, ushort] : Number of Parts
            Per Part:
                [n, UTF8 str] : Part Type Name
                [2, ushort] : Number of Key Frames
                Per Key Frame:
                	[4, float] : time index
		            [4, float] : translationX
		            [4, float] : translationY
		            [4, float] : scaleX
		            [4, float] : scaleY
		            [4, float] : rotation
---- PLTT - Palette Data Chunk
Per Palette:
[n, UTF8 str] : Palette Name
[2, ushort] Palette Data Size
[n, bytes] Palette Data
	// [1] First byte corresponds to number of consecutive color datas
	// [4*n] n*4 bytes representing the color data, in RGBA form
	//		(if first byte was 0x00),
	//		[1] next byte represents consecutive empty datas
	// ex: 00 FF 00 0A 3 [4] [4] [4], 265 whitespaces then 3 color data

NodeID: NodeIDs are IDs per node that only exist when saving and loading.  The number of the ID corresponds to the order in which it appears in the file
---ANSP - Animation Space Data
Per State:
[n, UT8 str] : Space Name
[1, byte] : Space Type
    0x01 : FFA Space
        [2, ushort] Number of Animations
        Per Animation:
            [4, int] AnimationId (AnimationId constructed in same way as NodeId)
            [4, int] AnimationId? or on-end link (-1 if null)
            if( not null)
                [4, int] on-end Frame
            [2, ushort] Logical X
            [2, ushort] Logical Y
        [2, ushort] Number of Links
        Per Link:
            [4, int] AnimationId of origin
            [4, int] Frame of origin
            [4, int] AnimationId of destination
            [4, int] Frame of destination


===== Impossed sanity things that could be warned in-program: ====
::::Nodes
[ubyte] limit for GroupDepth (i.e. group of group of group....)
[ushort] limit of all dimensions
[ushort] limit for number of color _layers in Prismatic Images

:::: Animations:
[short] limit for Frame Length
[short] limit for Layer Count
